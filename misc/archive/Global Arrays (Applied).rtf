{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f210\froman\fcharset238\fprq2 Times New Roman CE;}{\f211\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f213\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f214\froman\fcharset162\fprq2 Times New Roman Tur;}{\f215\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f216\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f217\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f218\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f220\fswiss\fcharset238\fprq2 Arial CE;}{\f221\fswiss\fcharset204\fprq2 Arial Cyr;}{\f223\fswiss\fcharset161\fprq2 Arial Greek;}{\f224\fswiss\fcharset162\fprq2 Arial Tur;}
{\f225\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f226\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f227\fswiss\fcharset186\fprq2 Arial Baltic;}{\f228\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f230\fmodern\fcharset238\fprq1 Courier New CE;}
{\f231\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f233\fmodern\fcharset161\fprq1 Courier New Greek;}{\f234\fmodern\fcharset162\fprq1 Courier New Tur;}{\f235\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f236\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f237\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f238\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid2059056\rsid9855486}{\*\generator Microsoft Word 10.0.2627;}{\info
{\author Thoth Software}{\operator Thoth Software}{\creatim\yr2010\mo6\dy25\hr14\min55}{\revtim\yr2010\mo6\dy25\hr15\min13}{\version2}{\edmins13}{\nofpages4}{\nofwords755}{\nofchars4305}{\*\company RS Graphix}{\nofcharsws5050}{\vern16437}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale150\nolnhtadjtbl\rsidroot2059056 \fet0\sectd 
\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid9855486 ScriptCmds.cpp (Don't forget to add ALL the "g_array" commands up above!)}{\b\f1\fs20\insrsid9855486 
\par [BEGIN]
\par }{\f2\fs20\insrsid9855486 \tab }{\f2\fs20\cf11\insrsid9855486 //************************** ARRAY COMMANDS ***************************
\par }{\f2\fs20\insrsid9855486 \tab }{\f2\fs20\cf11\insrsid9855486 //MiB JAN2010_26
\par \tab //MiB JUN2010_25 Added global functionality
\par }{\f2\fs20\insrsid9855486 \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486 ( Cmd.Name().starts_with( "array." ) || Cmd.Name().starts_with("g_array.") )
\par \tab \{
\par \tab \tab }{\f2\fs20\cf11\insrsid9855486 /*
\par \tab \tab \tab (g_)array.create <name>\tab \tab \tab \tab Creates an array (does nothing if a same-name array already exists)
\par \tab \tab \tab (g_)array.add <name> <val>\tab \tab \tab Add <val> to the end of array <name>
\par \tab \tab \tab (g_)array.set <name> <idx> <val>\tab \tab Sets <name>[idx] to <val>
\par \tab \tab \tab (g_)array.del <name> <idx>\tab \tab \tab Deletes <name>[idx]
\par \tab \tab \tab (g_)array.erase <name>\tab \tab \tab \tab Erases the array <name>
\par \tab \tab */
\par 
\par }{\f2\fs20\insrsid9855486 \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( Params.size() >= 1 )
\par \tab \tab \{
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 bool}{\f2\fs20\insrsid9855486  GLOBAL = Cmd.Name().starts_with( "g_" );
\par \tab \tab \tab msstring SubCmd = Cmd.Name().substr( GLOBAL ? 8 : 6 );
\par \tab \tab \tab msstring ArrName = Params[0];
\par 
\par \tab \tab \tab mslist<scriptarray_t> *ArrayList = GLOBAL ? &GlobalScriptArrays : &m.pScriptedEnt->scriptedArrays;
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 int}{\f2\fs20\insrsid9855486  idx = -1;
\par 
\par \tab \tab \tab foreach ( i, ArrayList->size() )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( (*ArrayList)[i].Name == ArrName )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab idx = i;
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 break}{\f2\fs20\insrsid9855486 ;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( SubCmd == "create" )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( idx == -1 )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab scriptarray_t arr;
\par \tab \tab \tab \tab \tab arr.Name = ArrName;
\par \tab \tab \tab \tab \tab ArrayList->add( arr );
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( idx != -1 )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( SubCmd == "add" )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( Params.size() >= 2 )
\par \tab \tab \tab \tab \tab \tab (*ArrayList)[idx].Vals.add( Params[1] );
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  ERROR_MISSING_PARMS;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( SubCmd == "set" )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( Params.size() >= 3 )
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 int}{\f2\fs20\insrsid9855486  subIdx = atoi ( Params[1].c_str() );
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid9855486 //Print("-1 < %i < %i\\n", subIdx, m.pScriptedEnt->scriptedArrays[idx].Vals.size());
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid9855486 //if ( subIdx > -1 && m.pScriptedEnt->scriptedArrays[idx].Vals.size() < (unsigned) subIdx )
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid9855486 //\{
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid9855486 //Print("DEBUG_ARRAY: Setting array %s idx %i to %s\\n",ArrName.c_str(),subIdx,Params[2].c_str());
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab \tab \tab \tab \tab (*ArrayList)[idx].Vals[subIdx] = Params[2];
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid9855486 //\}
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  ERROR_MISSING_PARMS;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( SubCmd == "del" )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( Params.size() >= 2 )
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 int}{\f2\fs20\insrsid9855486  subIdx = atoi ( Params[1].c_str() );
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid9855486 //if ( subIdx > -1 && m.pScriptedEnt->scriptedArrays[idx].Vals.size() < (unsigned) subIdx ) 
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab \tab \tab \tab \tab (*ArrayList)[idx].Vals.erase( subIdx );
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  ERROR_MISSING_PARMS;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( SubCmd == "erase" )
\par \tab \tab \tab \tab \tab ArrayList->erase( idx );
\par \tab \tab \tab \}
\par 
\par \tab \tab \}
\par \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  ERROR_MISSING_PARMS;
\par \tab \}}{\b\f1\fs20\insrsid9855486 
\par [END]
\par 
\par }{\f1\fs20\insrsid9855486 Script.cpp}{\b\f1\fs20\insrsid9855486 
\par [BEGIN]
\par }{\f2\fs20\cf11\insrsid9855486 \tab \tab // MiB JAN2010_26\tab Scripted array functions
\par \tab \tab // MiB JUN2010_25 Added global functionality
\par }{\f2\fs20\insrsid9855486 \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( ParserName.starts_with( "$get_array" ) || ParserName.starts_with( "$g_get_array" ) )
\par \tab \tab \{
\par \tab \tab \tab }{\f2\fs20\cf11\insrsid9855486 /*
\par \tab \tab \tab \tab Return [ERROR_NO_ARRAY] when the given array can't be found.
\par \tab \tab \tab \tab Return [ERROR_MISSING_PARAMS] if not given enough Parameters.
\par \tab \tab \tab \tab $get_array(<name>,<idx>)\tab \tab \tab \tab \tab \tab \tab Returns <name>[idx]\tab \tab ( -1 for bad index )
\par \tab \tab \tab \tab $get_arrayfind(<name>,<search_str>,[start_idx])\tab \tab Returns index of first instance of search_str after <name>[idx] ( -1 if not found )
\par \tab \tab \tab \tab $get_array_amt(<name>)\tab \tab \tab \tab \tab \tab \tab \tab Returns number of elements in <name>   ( -1 if couldn't find array )
\par \tab \tab \tab */
\par 
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( Params.size() >= 1 )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab msstring ArrName = Params[0];
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 int}{\f2\fs20\insrsid9855486  idx = -1;
\par \tab \tab \tab \tab mslist<scriptarray_t> *ArrayList = ParserName.starts_with( "$g_get_array" ) ? &GlobalScriptArrays : &m.pScriptedEnt->scriptedArrays;
\par \tab \tab \tab \tab foreach ( i, ArrayList->size() )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( (*ArrayList)[i].Name == ArrName )
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab idx = i;
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 break}{\f2\fs20\insrsid9855486 ;
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( idx == -1 )
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 return}{\f2\fs20\insrsid9855486  "[ERROR_NO_ARRAY]";
\par 
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( ParserName.ends_with( "array" ) )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( Params.size() >= 2 )
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 int}{\f2\fs20\insrsid9855486  subIdx = atoi( Params[1].c_str() );
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( subIdx > -1 && (*ArrayList)[idx].Vals.size() > (}{\f2\fs20\cf2\insrsid9855486 unsigned}{\f2\fs20\insrsid9855486 )subIdx )
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 return}{\f2\fs20\insrsid9855486  (*ArrayList)[idx].Vals[subIdx];
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( ParserName.ends_with( "find" ) )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( Params.size() >= 2 )
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab msstring srch = Params[1];
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 int}{\f2\fs20\insrsid9855486  start_idx = Params.size() >= 3 ? atoi ( Params[2].c_str() ) : 0;
\par \tab \tab \tab \tab \tab \tab start_idx = max( start_idx, 0 );
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 for}{\f2\fs20\insrsid9855486  ( }{\f2\fs20\cf2\insrsid9855486 int}{\f2\fs20\insrsid9855486  i = start_idx ; (}{\f2\fs20\cf2\insrsid9855486 unsigned}{\f2\fs20\insrsid9855486 ) i < ((*ArrayList)[
idx].Vals.size() - start_idx) ; ++i )
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( (*ArrayList)[idx].Vals[i] == srch )
\par \tab \tab \tab \tab \tab \tab \tab \tab RETURN_INT( i );
\par 
\par \tab \tab \tab \tab \tab \tab RETURN_INT( -1 );
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else
\par }{\f2\fs20\insrsid9855486 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 return}{\f2\fs20\insrsid9855486  "[ERROR_MISSING_PARAMS]";
\par 
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  }{\f2\fs20\cf2\insrsid9855486 if}{\f2\fs20\insrsid9855486  ( ParserName.ends_with( "amt" ) )
\par \tab \tab \tab \tab \tab RETURN_INT( (*ArrayList)[idx].Vals.size() )
\par \tab \tab \tab \}
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 else}{\f2\fs20\insrsid9855486  
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid9855486 return}{\f2\fs20\insrsid9855486  "[ERROR_MISSING_PARAMS]";
\par \tab \tab \}}{\b\f1\fs20\insrsid9855486 
\par [END]
\par 
\par }{\f1\fs20\insrsid9855486 Script.h (I put this below the CheckIfUsingCE function declarations}{\b\f1\fs20\insrsid9855486 
\par [BEGIN]
\par }{\f2\fs20\cf2\insrsid9855486 static}{\f2\fs20\insrsid9855486  mslist<scriptarray_t> GlobalScriptArrays; // MiB JUN2010_25}{\b\f1\fs20\insrsid9855486 
\par [END]
\par }{\b\f1\fs20\insrsid2059056 
\par SUPPLEMENTAL:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid2059056 {\f1\fs20\insrsid2059056\charrsid2059056 [06/25-14:54] ms_MiB: Anyway, go to CScript.h and remove the "static mslist<scriptarray_t> GlobalScriptArrays; // MiB JUN2010_25"
\par [06/25-14:55] Saint Thoth: Rgr
\par [06/25-14:55] ms_MiB: In CScript.cpp, put below "mslist<scriptvar_t> CScript::m_gVariables;
\par 
\par 
\par 
\par //Global script variables" 
\par mslist<scriptarray_t> CScript::GlobalScriptArrays;
\par 
\par // MiB JUN2010_25
\par [06/25-14:56] ms_MiB: In Script.h, below "static mslist<scriptvar_t>}{\f1\fs20\insrsid2059056  }{\f1\fs20\insrsid2059056\charrsid2059056 m_gVariables;
\par //Global variables" put 
\par static mslist<scriptarray_t> GlobalScriptArrays; // MiB JUN2010_25}{\f1\fs20\insrsid2059056\charrsid2059056 
\par }}