{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f251\froman\fcharset238\fprq2 Times New Roman CE;}{\f252\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f254\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f255\froman\fcharset162\fprq2 Times New Roman Tur;}{\f256\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f257\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f258\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f259\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f261\fswiss\fcharset238\fprq2 Arial CE;}{\f262\fswiss\fcharset204\fprq2 Arial Cyr;}{\f264\fswiss\fcharset161\fprq2 Arial Greek;}{\f265\fswiss\fcharset162\fprq2 Arial Tur;}
{\f266\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f267\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f268\fswiss\fcharset186\fprq2 Arial Baltic;}{\f269\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f271\fmodern\fcharset238\fprq1 Courier New CE;}
{\f272\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f274\fmodern\fcharset161\fprq1 Courier New Greek;}{\f275\fmodern\fcharset162\fprq1 Courier New Tur;}{\f276\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f277\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f278\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f279\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid14550599}{\*\generator Microsoft Word 10.0.2627;}{\info
{\author Saint Thoth}{\operator Saint Thoth}{\creatim\yr2008\mo1\dy31\hr22\min24}{\revtim\yr2008\mo1\dy31\hr22\min51}{\version2}{\edmins27}{\nofpages13}{\nofwords2511}{\nofchars14318}{\*\company Thoth Software}{\nofcharsws16796}{\vern16437}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale150\nolnhtadjtbl\rsidroot14550599 \fet0\sectd 
\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf1\insrsid14550599 MSCentral.h - in the class declaration, add:
\par }{\b\f2\fs20\cf1\insrsid14550599 [BEGIN]
\par }{\f2\fs20\cf2\insrsid14550599 static}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  WriteFNFile( msstring FileName, msstring line , msstring mode, }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599 
 lineNum = -1 ); }{\f2\fs20\cf11\insrsid14550599 //MiB Feb2008a}{\b\f2\fs20\cf1\insrsid14550599 
\par [END]}{\f2\fs20\cf1\insrsid14550599 
\par 
\par MSCentralTransaction_DLL.cpp - Put below the function "}{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  MSCentral::RetrieveChar( }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{
\f2\fs20\insrsid14550599  *AuthID, }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  CharNum )"}{\b\f2\fs20\cf1\insrsid14550599 
\par [BEGIN]}{\f2\fs20\cf11\insrsid14550599 
\par //MiB Feb2008a
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  MSCentral::WriteFNFile( msstring FileName, msstring Line , msstring mode , }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum )
\par \{
\par \tab msstringlist Params;
\par \tab Params.clear();
\par \tab Params.add("write");
\par 
\par \tab Params.add(""); }{\f2\fs20\cf11\insrsid14550599 //AuthID  -
\par }{\f2\fs20\insrsid14550599 \tab Params.add("0");}{\f2\fs20\cf11\insrsid14550599 //CharNum - These are both "required", but not used for this function
\par 
\par }{\f2\fs20\insrsid14550599 \tab Params.add(FileName);
\par \tab Params.add(Line);
\par \tab Params.add(mode);
\par \tab Params.add(msstring() = lineNum);
\par \tab DoTransaction( Params );
\par \}
\par }{\b\f2\fs20\insrsid14550599 [END]
\par 
\par }{\f2\fs20\insrsid14550599 MSCentralTransaction_DLL.cpp - search out "}{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Cmd == "dele" )" and add this with the rest:
\par }{\b\f2\fs20\insrsid14550599 [BEGIN]
\par }{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Cmd == "write" ) }{\f2\fs20\cf11\insrsid14550599 //MiB Feb2008a
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \{
\par \tab \tab \tab \tab msstring FileName = m_Params[4];
\par \tab \tab \tab \tab msstring Line = m_Params[5];
\par \tab \tab \tab \tab msstring Mode = m_Params[6];
\par \tab \tab \tab \tab msstring lineNum = m_Params[7];
\par \tab \tab \tab \tab Write( FileName, Line, Mode, lineNum );
\par \tab \tab \tab \}
\par }{\b\f2\fs20\insrsid14550599 [END]
\par 
\par }{\f2\fs20\insrsid14550599 MSCentralTransaction_DLL.cpp - in "}{\f2\fs20\cf2\insrsid14550599 class}{\f2\fs20\insrsid14550599  CTransaction_DLL : }{\f2\fs20\cf2\insrsid14550599 public}{\f2\fs20\insrsid14550599  CTransaction" define this among the others:

\par }{\b\f2\fs20\insrsid14550599 [BEGIN]
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  Write( }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *FileName , }{\f2\fs20\cf2\insrsid14550599 const}{
\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *line , }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *EntString , }{
\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *Handle ); //MiB Feb2008a}{\b\f2\fs20\insrsid14550599 
\par [END]
\par 
\par }{\f2\fs20\insrsid14550599 MSCentralTransaction_DLL.cpp - search "}{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  CTransaction_DLL::StoreChar(" and add below it:}{\b\f2\fs20\insrsid14550599 
\par [BEGIN]
\par }{\f2\fs20\insrsid14550599 //MiB Feb2008a}{\b\f2\fs20\insrsid14550599 
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  CTransaction_DLL::Write( }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *FileName, }{
\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *line, }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{
\f2\fs20\insrsid14550599  *Mode, }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *lineNum )
\par \{
\par \tab fnfilewrite_t FileMsg;
\par \tab strncpy( FileMsg.FileName, FileName, }{\f2\fs20\cf2\insrsid14550599 sizeof}{\f2\fs20\insrsid14550599 (FileMsg.FileName) );
\par \tab strncpy( FileMsg.line, line, }{\f2\fs20\cf2\insrsid14550599 sizeof}{\f2\fs20\insrsid14550599 (FileMsg.line) );
\par \tab FileMsg.type = Mode[0];
\par \tab FileMsg.lineNum = atoi(lineNum);
\par 
\par \tab FileMsg.Msg = MSG_WRITEFNFILE;
\par \tab FileMsg.Length = }{\f2\fs20\cf2\insrsid14550599 sizeof}{\f2\fs20\insrsid14550599 (FileMsg);
\par 
\par \tab send( m_Socket, (}{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  *)&FileMsg, }{\f2\fs20\cf2\insrsid14550599 sizeof}{\f2\fs20\insrsid14550599 (FileMsg), 0 );
\par \}
\par }{\b\f2\fs20\insrsid14550599 [END]
\par 
\par }{\f2\fs20\insrsid14550599 mscentraltransaction.h - enum msg_e, add this among the others
\par }{\b\f2\fs20\insrsid14550599 [BEGIN]
\par }{\f2\fs20\insrsid14550599 MSG_WRITEFNFILE,\tab \tab }{\f2\fs20\cf11\insrsid14550599 //Write a file to FN - MiB Feb2008a
\par }{\b\f2\fs20\insrsid14550599 [END]
\par 
\par }{\f2\fs20\insrsid14550599 mscentraltransaction.h - among the other structs:}{\b\f2\fs20\insrsid14550599 
\par [BEGIN]
\par }{\f2\fs20\insrsid14550599 //MiB Feb2008a}{\b\f2\fs20\insrsid14550599 
\par }{\f2\fs20\cf2\insrsid14550599 struct}{\f2\fs20\insrsid14550599  fnfilewrite_t : msg_t
\par \{
\par \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  FileName[128];
\par \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  line[512];
\par \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  type; }{\f2\fs20\cf11\insrsid14550599 //(o)verwrite,(i)nsert,(a)ppend
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum;
\par \};}{\b\f2\fs20\insrsid14550599 
\par [END]
\par 
\par }{\f2\fs20\insrsid14550599 ScriptCmds.cpp - (This includes changes to "erasefile" and "writefileline" of the script fileio)
\par }{\b\f2\fs20\insrsid14550599 [BEGIN]
\par }{\f2\fs20\cf11\insrsid14550599 //**************************** ERASEFILE *************************** 
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf11\insrsid14550599 //MiB FEB2008a - Scriptside File I/O
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf11\insrsid14550599 //erasefile <filename>
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Cmd.Name() == "erasefile" )
\par \tab \{
\par }{\f2\fs20\cf2\insrsid14550599 #ifdef}{\f2\fs20\insrsid14550599  VALVE_DLL
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() > 0 )
\par \tab \tab \{
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  cFileName[256];
\par \tab \tab \tab msstring fname = Params[0];
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  clearFromHere = Params.size() >= 2 ? Params[1] != "no_clear" : }{\f2\fs20\cf2\insrsid14550599 true}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab sprintf( cFileName, "%s/%s", EngineFunc::GetGameDir(), fname.c_str() );
\par 
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( clearFromHere ) }{\f2\fs20\cf11\insrsid14550599 //Remove from the filesOpen list unless specified otherwise. 
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab foreach( i , m.pScriptedEnt->filesOpen.size() )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( m.pScriptedEnt->filesOpen[i].fileName == fname )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab m.pScriptedEnt->filesOpen.erase( i );
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 break}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab std::remove(cFileName);
\par \tab \tab \}
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  ERROR_MISSING_PARMS;
\par }{\f2\fs20\cf2\insrsid14550599 #endif
\par }{\f2\fs20\insrsid14550599 \tab \}
\par \tab }{\f2\fs20\cf11\insrsid14550599 //**************************** WRITELINE *************************** 
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf11\insrsid14550599 //MiB FEB2008a - Scriptside File I/O
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf11\insrsid14550599 //writeline <filename> <line>
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Cmd.Name() == "writeline" )
\par \tab \{
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() >= 2 )
\par \tab \tab \{
\par \tab \tab \tab msstring fileName = Params[0];
\par \tab \tab \tab msstring lineToWrite = Params[1];
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  ref = -1;
\par \tab \tab \tab foreach( i , m.pScriptedEnt->filesOpen.size() )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( fileName == m.pScriptedEnt->filesOpen[i].fileName )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab ref = i;
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 break}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( ref == -1 )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab ref = m.pScriptedEnt->filesOpen.size();
\par \tab \tab \tab \tab m.pScriptedEnt->filesOpen.add( scriptfile_t() = fileName );
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() >= 3 )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum = atoi( Params[2] );
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  overwrite = }{\f2\fs20\cf2\insrsid14550599 false}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() >= 4 )
\par \tab \tab \tab \tab \tab overwrite = Params[3] == "overwrite";
\par 
\par \tab \tab \tab \tab m.pScriptedEnt->filesOpen[ref].ScriptFile_WriteLine( lineToWrite , lineNum , overwrite );
\par \tab \tab \tab \}
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab m.pScriptedEnt->filesOpen[ref].ScriptFile_WriteLine( lineToWrite );
\par \tab \tab \}
\par \tab \} 
\par \tab }{\f2\fs20\cf11\insrsid14550599 //MiB Feb2008a
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf11\insrsid14550599 //writefnfile <fileName> <line> <lineNum> [o/i]
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf11\insrsid14550599 //appendfnfile <fileName> <line>
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Cmd.Name() == "writefnfile" || Cmd.Name() == "appendfnfile" )
\par \tab \{
\par }{\f2\fs20\cf2\insrsid14550599 #ifdef}{\f2\fs20\insrsid14550599  VALVE_DLL
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() >= 2 )
\par \tab \tab \{
\par \tab \tab \tab msstring fileName = Params[0];
\par \tab \tab \tab msstring line = Params[1];
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum = Cmd.Name() == "writefnfile" ? atoi( Params[2] ) : -1;
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  o = Cmd.Name() == "writefnfile" && Params.size() >= 4 && Params[3] == "o";
\par             
\par \tab \tab \tab }{\f2\fs20\cf11\insrsid14550599 //Check to see if we have this file open
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab foreach( i , m.pScriptedEnt->filesOpenFN.size() )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( m.pScriptedEnt->filesOpenFN[i].fileName == fileName )
\par \tab \tab \tab \tab \{\tab 
\par \tab \tab \tab \tab \tab m.pScriptedEnt->filesOpenFN[i].AddLine( line, lineNum, o );
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 break}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Cmd.Name() == "appendfnfile" )
\par \tab \tab \tab \tab MSCentral::WriteFNFile( fileName, line, "a" );
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab MSCentral::WriteFNFile( fileName, line, o? "o":"i", lineNum );
\par \tab \tab \tab 
\par \tab \tab \}
\par }{\f2\fs20\cf2\insrsid14550599 #endif
\par }{\f2\fs20\insrsid14550599 \tab \}}{\b\f2\fs20\insrsid14550599  
\par [END]
\par 
\par }{\f2\fs20\insrsid14550599 Bottom of ScriptCmds.cpp (overwriting my original FileIO stuff there)
\par }{\b\f2\fs20\insrsid14550599 [BEGIN]
\par }{\f2\fs20\cf11\insrsid14550599 //MiB Feb2008a (This goes on for a ways)
\par 
\par //InFile class
\par //==================================
\par //Class for inputting a file with minimal handle time
\par }{\f2\fs20\cf2\insrsid14550599 class}{\f2\fs20\insrsid14550599  InFile : }{\f2\fs20\cf2\insrsid14550599 public}{\f2\fs20\insrsid14550599  ifstream
\par \{
\par }{\f2\fs20\cf2\insrsid14550599 public}{\f2\fs20\insrsid14550599 :
\par \tab msstring buffered;
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  Open(  msstring_ref FileName )
\par \tab \{
\par \tab \tab ifstream::open( FileName );
\par \tab \tab buffered = "";
\par \tab \};
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  Delete(msstring fileName)
\par \tab \{
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( is_open() )
\par \tab \tab \tab ::DeleteFile( fileName );
\par \tab \};
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  Close() \{ ifstream::close(); \};
\par 
\par \tab msstring ReadLine( )
\par \tab \{
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( !is_open() ) }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  "[FILE_NOT_FOUND]";
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( ifstream::eof() ) }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  "[EOF]";
\par 
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  line[256];
\par \tab \tab ifstream::getline( line , 256 );
\par 
\par \tab \tab msstring theReturn = line;
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( ifstream::eof() ) }{\f2\fs20\cf11\insrsid14550599 //If this is the end of file
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( theReturn == "" ) }{\f2\fs20\cf11\insrsid14550599 //And there was nothing on this line
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab theReturn = "[EOF];"; }{\f2\fs20\cf11\insrsid14550599 //Mark it as the end of the file
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab 
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  theReturn;
\par \tab \}
\par \};
\par }{\f2\fs20\cf11\insrsid14550599 //==================================
\par 
\par 
\par //scriptfile_t Reading
\par //==================================
\par 
\par //Read the next line of the file
\par }{\f2\fs20\insrsid14550599 msstring scriptfile_t::ScriptFile_ReadLine()
\par \{
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( nofile ) }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  "[FILE_NOT_FOUND]";
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( endoffile ) }{\f2\fs20\cf11\insrsid14550599 //If you reached the end of file last read, reset
\par }{\f2\fs20\insrsid14550599 \tab \{
\par \tab \tab Reset();
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( endoffile ) }{\f2\fs20\cf11\insrsid14550599 //If it's still eof after the reset, there's nothing to read at all.
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  "[EOF]";
\par \tab \}
\par 
\par \tab msstring result = ScriptFile_ReadLine( curline++ );
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( result == "[EOF]" )
\par \tab \tab endoffile = }{\f2\fs20\cf2\insrsid14550599 true}{\f2\fs20\insrsid14550599 ;
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  result;
\par \}
\par 
\par }{\f2\fs20\cf11\insrsid14550599 //Read a specified line from the file
\par }{\f2\fs20\insrsid14550599 msstring scriptfile_t::ScriptFile_ReadLine( }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum )
\par \{
\par \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( nofile ) }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  "[FILE_NOT_FOUND]";
\par 
\par \tab msstring theReturn;
\par \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( lineNum < (}{\f2\fs20\cf2\insrsid14550599 signed}{\f2\fs20\insrsid14550599 ) Lines.size() )
\par \tab \tab theReturn = Lines[lineNum];
\par \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab theReturn = "[EOF]";
\par \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  theReturn;
\par \}
\par }{\f2\fs20\cf11\insrsid14550599 //==================================
\par 
\par 
\par //scriptfile_t Writing
\par 
\par //==================================
\par //Append a line
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  scriptfile_t::ScriptFile_WriteLine( msstring line )
\par \{
\par \tab ScriptFile_WriteLine( line , Lines.size() );
\par \}
\par 
\par }{\f2\fs20\cf11\insrsid14550599 //Write a line at X, possibly overwriting or just inserting
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  scriptfile_t::ScriptFile_WriteLine( msstring line, }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum, }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599 
 overwrite )
\par \{
\par \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  cFileName[512];
\par \tab sprintf( cFileName, "%s/%s", EngineFunc::GetGameDir(), fileName.c_str() );
\par \tab CMSStream mibfile;
\par \tab mibfile.open( cFileName, 0 );
\par 
\par \tab AddLine( line , lineNum, overwrite );
\par 
\par \tab }{\f2\fs20\cf11\insrsid14550599 //Write all the lines to the specified file
\par }{\f2\fs20\insrsid14550599 \tab foreach( i , Lines.size() )
\par \tab \{
\par \tab \tab mibfile << Lines[i]; }{\f2\fs20\cf11\insrsid14550599 //<< ";"; //Add the necessary ';' for rereads
\par }{\f2\fs20\insrsid14550599 \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( i != (}{\f2\fs20\cf2\insrsid14550599 signed}{\f2\fs20\insrsid14550599 ) Lines.size() - 1 ) }{\f2\fs20\cf11\insrsid14550599 //If this isn't the last line

\par }{\f2\fs20\insrsid14550599 \tab \tab \tab mibfile << "\\n"; }{\f2\fs20\cf11\insrsid14550599 //Add a line break
\par }{\f2\fs20\insrsid14550599 \tab \}
\par \tab 
\par \tab mibfile.Close(); }{\f2\fs20\cf11\insrsid14550599 //Close the file, if not for making sure that changes save, then for making sure we don't get overlapping handles
\par }{\f2\fs20\insrsid14550599 \}
\par }{\f2\fs20\cf11\insrsid14550599 //==================================
\par 
\par 
\par //Easy way to open files
\par }{\f2\fs20\insrsid14550599 scriptfile_t &scriptfile_t::}{\f2\fs20\cf2\insrsid14550599 operator}{\f2\fs20\insrsid14550599  = ( }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  msstring_ref a ) 
\par \{
\par \tab }{\f2\fs20\cf11\insrsid14550599 /* Example:
\par \tab \tab scriptfile_t file;
\par \tab \tab file = "test.txt";
\par \tab \tab or
\par \tab \tab file = "logs/log_msdll.txt";
\par \tab */
\par }{\f2\fs20\insrsid14550599 \tab Open( a );
\par \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  *}{\f2\fs20\cf2\insrsid14550599 this}{\f2\fs20\insrsid14550599 ;
\par \}
\par 
\par }{\f2\fs20\cf11\insrsid14550599 //Open a specified file and input its lines for later "reading"
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  scriptfile_t::Open( msstring_ref a )
\par \{
\par \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  cFileName[256];
\par \tab msstring fname = a;
\par \tab sprintf( cFileName, "%s/%s", EngineFunc::GetGameDir(), fname.c_str() ); }{\f2\fs20\cf11\insrsid14550599 //Put the filename into the correct directory path
\par }{\f2\fs20\insrsid14550599 \tab fileName = fname;
\par \tab InFile file;
\par \tab file.Open( cFileName );
\par \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  count = -1; }{\f2\fs20\cf11\insrsid14550599 //Has to be -1 for 0 on the first pass - done like this so that...
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf2\insrsid14550599 do}{\f2\fs20\insrsid14550599 \{
\par \tab \tab count++; }{\f2\fs20\cf11\insrsid14550599 //Keep the Lines' last element index even with the conditional statements' count
\par }{\f2\fs20\insrsid14550599 \tab \tab Lines.add( file.ReadLine( ) ); }{\f2\fs20\cf11\insrsid14550599 //Read each line into the list
\par }{\f2\fs20\insrsid14550599 \tab \}}{\f2\fs20\cf2\insrsid14550599 while}{\f2\fs20\insrsid14550599 ( Lines[count] != "[EOF]" && Lines[count] != "[FILE_NOT_FOUND]" );
\par 
\par \tab file.Close(); }{\f2\fs20\cf11\insrsid14550599 //Prevents overlapping handles.
\par 
\par }{\f2\fs20\insrsid14550599 \tab curline = 0; }{\f2\fs20\cf11\insrsid14550599 //Set the current line to 0 - this is for the ReadLine() function that goes line-by-line through the file
\par 
\par }{\f2\fs20\insrsid14550599 \tab nofile = Lines[0] == "[FILE_NOT_FOUND]";
\par \tab Lines.erase( Lines.size() - 1 ); }{\f2\fs20\cf11\insrsid14550599 //Get rid of the "[EOF]" or "[FILE_NOT_FOUND]" token
\par 
\par }{\f2\fs20\insrsid14550599 \tab endoffile = Lines.size() == 0 || (Lines.size() == 1 && Lines[0] == ""); }{\f2\fs20\cf11\insrsid14550599 //It's possible that the file exists, but has no text, so let the scriptfile know if it's already at EOF
\par 
\par }{\f2\fs20\insrsid14550599 \}
\par 
\par }{\f2\fs20\cf11\insrsid14550599 //Reset the file for reading again
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  scriptfile_t::Reset()
\par \{
\par \tab curline = 0;
\par \tab endoffile = Lines.size() == 0 || (Lines.size() == 1 && Lines[0] == "");
\par \}
\par 
\par }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  scriptfile_t::AddLine( msstring line , }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum, }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  overwrite )
\par \{
\par \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( lineNum == -1 )
\par \tab \{
\par \tab \tab Lines.add( line );
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599 ;
\par \tab \}
\par 
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Lines[0] == "" && Lines.size() == 1) }{\f2\fs20\cf11\insrsid14550599 //Don't ask...
\par }{\f2\fs20\insrsid14550599 \tab \tab Lines[0] = line;
\par \tab }{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( lineNum < (}{\f2\fs20\cf2\insrsid14550599 signed}{\f2\fs20\insrsid14550599 )Lines.size() )
\par \tab \{
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( overwrite )
\par \tab \tab \tab Lines[lineNum] = line;
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \{
\par \tab \tab \tab }{\f2\fs20\cf11\insrsid14550599 //Insert the line
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNumTemp = lineNum;
\par \tab \tab \tab msstringlist LinesTemp;
\par \tab \tab \tab foreach( i , Lines.size() )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( i == lineNumTemp ) }{\f2\fs20\cf11\insrsid14550599 //You've found the correct line
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab LinesTemp.add( line ); }{\f2\fs20\cf11\insrsid14550599 //Add it in the proper place
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab i--; }{\f2\fs20\cf11\insrsid14550599 //Go back so you will write the original line next
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab lineNumTemp = -1; }{\f2\fs20\cf11\insrsid14550599 //Don't find the line infinitely
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid14550599 //Not the right line - add it back normally
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab LinesTemp.add( Lines[i] );
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \tab Lines = LinesTemp; }{\f2\fs20\cf11\insrsid14550599 //Overwrite the old list with the properly generated one
\par }{\f2\fs20\insrsid14550599 \tab \tab \}
\par \tab \}
\par \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab Lines.add( line );
\par \}
\par }{\f2\fs20\cf11\insrsid14550599 //Finally, end of MiB Feb2008a }{\b\f2\fs20\insrsid14550599 
\par [END]
\par 
\par }{\f2\fs20\insrsid14550599 Script.cpp - $get_fileline update}{\b\f2\fs20\insrsid14550599 
\par [BEGIN]
\par }{\f2\fs20\cf11\insrsid14550599 //MiB Feb2008a \endash  \'93Read\'94 a line from a file
\par }{\f2\fs20\insrsid14550599 \tab \tab }{\f2\fs20\cf11\insrsid14550599 //- $get_fileline(<file>,[line])
\par }{\f2\fs20\insrsid14550599 \tab \tab }{\f2\fs20\cf2\insrsid14550599 else}{\f2\fs20\insrsid14550599  }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( ParserName == "$get_fileline" )
\par \tab \tab \{
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() >= 1 )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab msstring fileName = Params[0];
\par 
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  found = }{\f2\fs20\cf2\insrsid14550599 false}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( m.pScriptedEnt->filesOpen.size() >= 1 )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab foreach( i , m.pScriptedEnt->filesOpen.size() )
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid14550599 //Check to see if we already have this file open
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( m.pScriptedEnt->filesOpen[i].fileName == fileName )
\par \tab \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab \tab found = }{\f2\fs20\cf2\insrsid14550599 true}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() >= 2 )
\par \tab \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  m.pScriptedEnt->filesOpen[i].ScriptFile_ReadLine( atoi( Params[1] )); }{\f2\fs20\cf11\insrsid14550599 //Read specific line
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  m.pScriptedEnt->filesOpen[i].ScriptFile_ReadLine(); }{\f2\fs20\cf11\insrsid14550599 //Read next line
\par 
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 break}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab 
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( !found ) }{\f2\fs20\cf11\insrsid14550599 //The file wasn't found
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab scriptfile_t file;
\par \tab \tab \tab \tab \tab file = fileName; }{\f2\fs20\cf11\insrsid14550599 //Open the file
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab m.pScriptedEnt->filesOpen.add( file ); }{\f2\fs20\cf11\insrsid14550599 //Add it to the list of opened files
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( Params.size() >= 2 )
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  m.pScriptedEnt->filesOpen[ m.pScriptedEnt->filesOpen.size() - 1 ].ScriptFile_ReadLine( atoi( Params[1] ) );
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 return}{\f2\fs20\insrsid14550599  m.pScriptedEnt->filesOpen[ m.pScriptedEnt->filesOpen.size() - 1 ].ScriptFile_ReadLine();
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \}}{\b\f2\fs20\insrsid14550599 
\par [END]
\par 
\par Script.h - REMOVE THE DECLARATION OF scriptfile_t
\par Script.cpp - REMOVE THE DECLARATION OF filesOpen
\par 
\par }{\f2\fs20\insrsid14550599 cbase.h - above "}{\f2\fs20\cf2\insrsid14550599 class}{\f2\fs20\insrsid14550599  CBaseEntity"
\par }{\b\f2\fs20\insrsid14550599 [BEGIN]
\par }{\f2\fs20\cf2\insrsid14550599 struct}{\f2\fs20\insrsid14550599  scriptfile_t
\par \{
\par }{\f2\fs20\cf2\insrsid14550599 private}{\f2\fs20\insrsid14550599 :
\par \tab \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  curline;
\par }{\f2\fs20\cf2\insrsid14550599 public}{\f2\fs20\insrsid14550599 :
\par \tab msstring fileName;
\par \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  endoffile;
\par \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  nofile;
\par 
\par \tab }{\f2\fs20\cf11\insrsid14550599 //Variables for FN Files
\par }{\f2\fs20\insrsid14550599 \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  handleIdx;
\par \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  readyForRead;
\par \tab }{\f2\fs20\cf11\insrsid14550599 //End
\par 
\par }{\f2\fs20\insrsid14550599 \tab msstringlist Lines;
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  JumpToLine( }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  line ) \{ curline = line; \}
\par 
\par \tab scriptfile_t &}{\f2\fs20\cf2\insrsid14550599 operator}{\f2\fs20\insrsid14550599  = ( }{\f2\fs20\cf2\insrsid14550599 const}{\f2\fs20\insrsid14550599  msstring_ref a );
\par 
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  Open( msstring_ref a );
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  Reset();
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  AddLine( msstring line , }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum, }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  overwrite );
\par 
\par \tab msstring ScriptFile_ReadLine();
\par \tab msstring ScriptFile_ReadLine( }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  line );
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  ScriptFile_WriteLine( msstring line );
\par \tab }{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  ScriptFile_WriteLine( msstring line, }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  lineNum, }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  overwrite = }{
\f2\fs20\cf2\insrsid14550599 false}{\f2\fs20\insrsid14550599 );
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab  }{\f2\fs20\cf11\insrsid14550599 //Only used if you're "inserting" a line
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab  }{\f2\fs20\cf11\insrsid14550599 //Choice between inserting or overwriting
\par }{\f2\fs20\insrsid14550599 \}; }{\b\f2\fs20\insrsid14550599 
\par [END]
\par 
\par }{\f2\fs20\insrsid14550599 cbase.h - IN the definition of "class CBaseEntity"}{\b\f2\fs20\insrsid14550599 
\par [BEGIN]
\par }{\f2\fs20\insrsid14550599 mslist<scriptfile_t> filesOpen;}{\b\f2\fs20\insrsid14550599 
\par [END]
\par 
\par 
\par 
\par }{\b\f2\fs32\insrsid14550599 ***MSCENTAL***
\par }{\f1\fs20\insrsid14550599 
\par }{\f2\fs20\insrsid14550599 MSCentralTransaction.cpp - with others in "}{\f2\fs20\cf2\insrsid14550599 void}{\f2\fs20\insrsid14550599  CTransaction_CENTRAL::HandleMsg( msg_t &Msg )"
\par }{\b\f2\fs20\insrsid14550599 [BEGIN]}{\b\f1\fs20\insrsid14550599 
\par }{\f2\fs20\cf2\insrsid14550599 case}{\f2\fs20\insrsid14550599  MSG_WRITEFNFILE:
\par \tab \tab \{
\par \tab \tab \tab fnfilewrite_t &FileMsg = (fnfilewrite_t &)Msg;
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  type = FileMsg.type;
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  o = }{\f2\fs20\cf2\insrsid14550599 false}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 switch}{\f2\fs20\insrsid14550599 ( type )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 case}{\f2\fs20\insrsid14550599  'a':
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab ofstream outfile;
\par \tab \tab \tab \tab \tab outfile.open( FileMsg.FileName, ios_base::app );
\par \tab \tab \tab \tab \tab outfile << FileMsg.line << endl;
\par \tab \tab \tab \tab \tab outfile.close();
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 break}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 case}{\f2\fs20\insrsid14550599  'o':
\par \tab \tab \tab \tab \tab o = }{\f2\fs20\cf2\insrsid14550599 true}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 case}{\f2\fs20\insrsid14550599  'i':
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab string mainFile = FileMsg.FileName;
\par \tab \tab \tab \tab \tab string tempFile = mainFile;
\par \tab \tab \tab \tab \tab tempFile += "TEMP";
\par 
\par \tab \tab \tab \tab \tab ifstream mainIn;
\par \tab \tab \tab \tab \tab mainIn.open( mainFile.c_str() );
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( mainIn.is_open() )
\par \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab ofstream tempOut;
\par \tab \tab \tab \tab \tab \tab tempOut.open( tempFile.c_str() );
\par 
\par \tab \tab \tab \tab \tab \tab ::Print("File existed");
\par 
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  wrote = }{\f2\fs20\cf2\insrsid14550599 false}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 int}{\f2\fs20\insrsid14550599  count = 0;
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 do
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  line[512];
\par \tab \tab \tab \tab \tab \tab \tab mainIn.getline( line , 512 );
\par \tab \tab \tab \tab \tab \tab \tab ::Print("Pulled in %s as line %i", line , count );
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( count == FileMsg.lineNum )
\par \tab \tab \tab \tab \tab \tab \tab \{
\par                                 wrote = }{\f2\fs20\cf2\insrsid14550599 true}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( count ) tempOut << endl;
\par \tab \tab \tab \tab \tab \tab \tab \tab tempOut << FileMsg.line;
\par \tab \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( !o )
\par \tab \tab \tab \tab \tab \tab \tab \tab \tab tempOut << endl << line;
\par \tab \tab \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( count ) tempOut << endl;
\par \tab \tab \tab \tab \tab \tab \tab \tab tempOut << line;
\par \tab \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \tab \tab ++count;
\par \tab \tab \tab \tab \tab \tab \}}{\f2\fs20\cf2\insrsid14550599 while}{\f2\fs20\insrsid14550599 ( !mainIn.eof() );
\par 
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid14550599 //Likely because someone specified an "illegal" line index
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( !wrote ) tempOut << FileMsg.line << endl;
\par 
\par \tab \tab \tab \tab \tab \tab tempOut.close();
\par \tab \tab \tab \tab \tab \tab mainIn.close();
\par 
\par \tab \tab \tab \tab \tab \tab ifstream tempIn;
\par \tab \tab \tab \tab \tab \tab tempIn.open( tempFile.c_str() );
\par 
\par \tab \tab \tab \tab \tab \tab ofstream mainOut;
\par \tab \tab \tab \tab \tab \tab mainOut.open( mainFile.c_str() );
\par 
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 bool}{\f2\fs20\insrsid14550599  wrotefirst = }{\f2\fs20\cf2\insrsid14550599 false}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 while}{\f2\fs20\insrsid14550599 ( !tempIn.eof() )
\par \tab \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 char}{\f2\fs20\insrsid14550599  line[512];
\par \tab \tab \tab \tab \tab \tab \tab tempIn.getline( line , 512 );
\par \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 if}{\f2\fs20\insrsid14550599 ( wrotefirst ) mainOut << endl;
\par \tab \tab \tab \tab \tab \tab \tab mainOut << line;
\par \tab \tab \tab \tab \tab \tab \tab wrotefirst = }{\f2\fs20\cf2\insrsid14550599 true}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \tab \tab \tab \tab \}
\par 
\par \tab \tab \tab \tab \tab \tab tempIn.close();
\par \tab \tab \tab \tab \tab \tab mainIn.close();
\par 
\par \tab \tab \tab \tab \tab \tab std::remove( tempFile.c_str() );
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 else
\par }{\f2\fs20\insrsid14550599 \tab \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab \tab mainIn.close();
\par \tab \tab \tab \tab \tab \tab ofstream mainOut;
\par \tab \tab \tab \tab \tab \tab mainOut.open( mainFile.c_str() );
\par \tab \tab \tab \tab \tab \tab mainOut << FileMsg.line << endl;
\par \tab \tab \tab \tab \tab \tab mainOut.close();
\par \tab \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \tab SendDisconnect();
\par \tab \tab 
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid14550599 break}{\f2\fs20\insrsid14550599 ;
\par \tab \tab \}
\par }{\b\f2\fs20\insrsid14550599 [END]
\par }{\b\f2\fs20\insrsid14550599 
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid14550599 {\f1\fs20\insrsid14550599\charrsid14550599 [22:43] ms_MiB: O_o
\par [22:43] ms_MiB: Said errors being?
\par [22:43] Saint Thoth: after applyying FNWrite
\par [22:43] Saint Thoth: take me a bit to assemble them all...
\par [22:43] Saint Thoth: \\hldev\\msc_src\\MSShared\\ScriptCmds.cpp(3174): error C2039: 'filesOpenFN' : is not a member of 'CBaseEntity'
\par  
\par [22:43] ms_MiB: Heh
\par [22:43] Saint Thoth: \\hldev\\msc_src\\MSShared\\ScriptCmds.cpp(3174): error C2228: left of '.size' must have class/struct/union type
\par  
\par [22:43] Saint Thoth: \\hldev\\msc_src\\MSShared\\ScriptCmds.cpp(3184): error C2653: 'MSCentral' : is not a class or namespace name
\par  
\par [22:43] Saint Thoth: \\hldev\\msc_src\\MSShared\\ScriptCmds.cpp(3184): error C3861: 'WriteFNFile': identifier not found, even with argument-dependent lookup
\par  
\par [22:44] ms_MiB: Ok, I can fix those all
\par [22:44] ms_MiB: Go to cbase.h
\par [22:44] Saint Thoth: How about I send ye my current archive and you add all this stuff in, and I can finish these scripts? :)
\par [22:44] ms_MiB: There's a declaration of "filesOpen". Below it, define "filesOpenFN" with the same format
\par [22:44] ms_MiB: It's two changes, mate
\par [22:44] ms_MiB: One's there
\par [22:45] ms_MiB: The other is to add "MSCentral.h" as an include to ScriptCmds.cpp, I believe
\par [22:45] Saint Thoth: Where is the declarations of filesOpen?
\par [22:45] ms_MiB: in cbase.h
\par [22:45] ms_MiB: ...I should hope....
\par [22:45] Saint Thoth:      mslist<scriptfile_t> filesOpen; //MiB FEB2008a - file i/o
\par       mslist<scriptfile_t> filesOpenFN; //MiB FEB2008a - file i/o
\par  
\par [22:46] ms_MiB: Yesh
\par [22:46] Saint Thoth: Adding MSCentral.h to ScriptCmds.cpp is a tad scarey... but okaaay
\par [22:46] ms_MiB: Why's it scary?
\par [22:47] Saint Thoth: Makes me think it's going to run the whole sequence there. >_>
\par [22:47] ms_MiB: Oh, no chance
\par [22:47] Saint Thoth: - should this be server side only in the #ifdef there?
\par [22:47] ms_MiB: MSCentral.h just has some static functions >_>
\par [22:47] ms_MiB: Yeah, believe so
\par [22:48] Saint Thoth: Do I use dlls/MSCentral.h or MSCentral/MSCentral.h ?
\par [22:48] ms_MiB: #include "MSCentral.h"
\par [22:48] ms_MiB: That's all I have
\par [22:48] ms_MiB: I assume that's dlls/ 
\par [22:48] Saint Thoth: Hope I'm editing the right MSCentral.h
\par [22:49] ms_MiB: >_<
\par [22:49] ms_MiB: You should only be able to see one of them from ms.dll
\par [22:50] Saint Thoth: wow, it compiled... although I've not added FNRead yet...}{\f1\fs20\insrsid14550599\charrsid14550599 
\par }}