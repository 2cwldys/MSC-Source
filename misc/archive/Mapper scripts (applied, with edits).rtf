{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f210\froman\fcharset238\fprq2 Times New Roman CE;}{\f211\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f213\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f214\froman\fcharset162\fprq2 Times New Roman Tur;}{\f215\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f216\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f217\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f218\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f220\fswiss\fcharset238\fprq2 Arial CE;}{\f221\fswiss\fcharset204\fprq2 Arial Cyr;}{\f223\fswiss\fcharset161\fprq2 Arial Greek;}{\f224\fswiss\fcharset162\fprq2 Arial Tur;}
{\f225\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f226\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f227\fswiss\fcharset186\fprq2 Arial Baltic;}{\f228\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f230\fmodern\fcharset238\fprq1 Courier New CE;}
{\f231\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f233\fmodern\fcharset161\fprq1 Courier New Greek;}{\f234\fmodern\fcharset162\fprq1 Courier New Tur;}{\f235\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f236\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f237\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f238\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;\red153\green204\blue0;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive 
\ssemihidden Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid2321245\rsid3369802\rsid12734715\rsid13587350\rsid14513135}
{\*\generator Microsoft Word 10.0.2627;}{\info{\author Thoth Software}{\operator Thoth Software}{\creatim\yr2010\mo7\dy13\hr17\min4}{\revtim\yr2010\mo7\dy22\hr20\min47}{\version3}{\edmins5801}{\nofpages4}{\nofwords825}{\nofchars4705}
{\*\company RS Graphix}{\nofcharsws5519}{\vern16437}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind4\viewscale150\nolnhtadjtbl\rsidroot3369802 \fet0\sectd \linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid13587350 Script.cpp - Overwrite this function}{\b\f1\fs20\insrsid13587350 
\par [BEGIN]
\par }{\f2\fs20\cf2\insrsid13587350 bool}{\f2\fs20\insrsid13587350  CScript::Spawn( string_i Filename, CBaseEntity *pScriptedEnt, IScripted *pScriptedInterface, }{\f2\fs20\cf2\insrsid13587350 bool}{\f2\fs20\insrsid13587350  PrecacheOnly, }{
\f2\fs20\cf2\insrsid13587350 bool}{\f2\fs20\insrsid13587350  Casual )
\par \{
\par \tab }{\f2\fs20\cf11\insrsid13587350 //Keep track of all #included files... don't allow #including the same file twice
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf11\insrsid13587350 //Update: A script can specify when it wants to allow duplicate includes
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350 ( !m.AllowDupInclude )
\par \tab \tab foreach( i, m_Dependencies.size() )
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350 ( !stricmp(m_Dependencies[i],Filename) )
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 return}{\f2\fs20\insrsid13587350  }{\f2\fs20\cf2\insrsid13587350 true}{\f2\fs20\insrsid13587350 ;\tab }{\f2\fs20\cf11\insrsid13587350 
//Return true here, so its a 'fake' successful.  This should only happen on #includes
\par }{\f2\fs20\insrsid13587350 \tab m_Dependencies.add( Filename );
\par 
\par \tab }{\f2\fs20\cf11\insrsid13587350 //Localize these for later reference
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf11\insrsid13587350 //pScriptedEnt->ScriptFName = Filename; //MiB DEC2007a - scriptname prop - phayle
\par }{\f2\fs20\insrsid13587350 \tab m.pScriptedEnt = pScriptedEnt;
\par \tab m.pScriptedInterface = pScriptedInterface;
\par \tab m.PrecacheOnly = PrecacheOnly;
\par \tab m.ScriptFile = Filename;
\par \tab m.DefaultScope = EVENTSCOPE_SHARED;
\par \tab m.AllowDupInclude = }{\f2\fs20\cf2\insrsid13587350 false}{\f2\fs20\insrsid13587350 ;
\par \tab m.Included = m_Dependencies.size() >= 2;
\par \tab }{\f2\fs20\cf2\insrsid13587350 bool}{\f2\fs20\insrsid13587350  fReturn = }{\f2\fs20\cf2\insrsid13587350 false}{\f2\fs20\insrsid13587350 ;
\par 
\par \tab }{\f2\fs20\cf11\insrsid13587350 //This should always be true for non-dev builds, because it must use the script library
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf2\insrsid13587350 char}{\f2\fs20\insrsid13587350  *ScriptData;
\par \tab msstring ScriptName = m.ScriptFile;
\par \tab ScriptName += SCRIPT_EXT;
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid13587350 {\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf11\insrsid13587350 //MiB JUL2010_13 - *EXT/ means to external script folder. Lets mappers script.
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf11\insrsid13587350 //- Thothie - not intuitive, switching to test_scripts/ - same folder scripts are to be placed in.
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf2\insrsid13587350 bool}{\f2\fs20\insrsid13587350  MapperScript = ScriptName.starts_with("test_scripts/") && MSGlobals::DevModeEnabled;
\par \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350  ( MapperScript )
\par \tab \{
\par \tab \tab ScriptName = ScriptName.substr(13); }{\f2\fs20\cf11\insrsid13587350 //Get rid of the *EXT/
\par }{\f2\fs20\insrsid13587350 \tab \tab m.ScriptFile = ScriptName.thru_char(".").c_str();
\par \tab \}
\par 
\par \tab }{\f2\fs20\cf2\insrsid13587350 #ifndef}{\f2\fs20\insrsid13587350  SCRIPT_LOCKDOWN
\par \tab \tab }{\f2\fs20\cf2\insrsid13587350 char}{\f2\fs20\insrsid13587350  cScriptFile[MAX_PATH];
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid13587350 {\f2\fs20\insrsid13587350 \tab \tab sprintf( cScriptFile, "test_scripts/%s", ScriptName.c_str() );}{\f2\fs20\insrsid13587350 
\par }{\f2\fs20\insrsid13587350 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f2\fs20\insrsid13587350 \tab \tab }{\f2\fs20\cf2\insrsid13587350 int}{\f2\fs20\insrsid13587350  iFileSize;
\par \tab \tab byte *pMemFile = LOAD_FILE_FOR_ME( cScriptFile, &iFileSize );
\par \tab \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350 ( pMemFile ) 
\par \tab \tab \{
\par \tab \tab \tab ScriptData = msnew(}{\f2\fs20\cf2\insrsid13587350 char}{\f2\fs20\insrsid13587350 [iFileSize+1]);
\par \tab \tab \tab memcpy( ScriptData, pMemFile, iFileSize );
\par \tab \tab \tab ScriptData[iFileSize] = 0;
\par \tab \tab \tab FREE_FILE( pMemFile );
\par \tab \tab \}
\par \tab \tab }{\f2\fs20\cf2\insrsid13587350 else
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf2\insrsid13587350 #endif
\par }{\f2\fs20\insrsid13587350 \tab \tab \{
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 unsigned}{\f2\fs20\insrsid13587350  }{\f2\fs20\cf2\insrsid13587350 long}{\f2\fs20\insrsid13587350  ScriptSize;
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350  ( MapperScript && !MSGlobals::CentralEnabled )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 char}{\f2\fs20\insrsid13587350  cScriptFile[MAX_PATH], cGameDir[MAX_PATH];
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #ifdef}{\f2\fs20\insrsid13587350  VALVE_DLL
\par \tab \tab \tab \tab \tab GET_GAME_DIR( cGameDir );
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #else
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab strcpy( cGameDir, gEngfuncs.pfnGetGameDirectory( ) );
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #endif
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab sprintf( cScriptFile, "}{\f2\fs20\insrsid3369802 s}{\f2\fs20\insrsid13587350 cripts/%s", ScriptName.c_str() );
\par 
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 int}{\f2\fs20\insrsid13587350  iFileSize;
\par \tab \tab \tab \tab byte *pMemFile = LOAD_FILE_FOR_ME( cScriptFile, &iFileSize );
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350 ( pMemFile )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab ScriptData = msnew(}{\f2\fs20\cf2\insrsid13587350 char}{\f2\fs20\insrsid13587350 [iFileSize+1]);
\par \tab \tab \tab \tab \tab memcpy( ScriptData, pMemFile, iFileSize );
\par \tab \tab \tab \tab \tab ScriptData[iFileSize] = 0;
\par \tab \tab \tab \tab \tab FREE_FILE( pMemFile );
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \}
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 else}{\f2\fs20\insrsid13587350  }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350 ( ScriptMgr::m_GroupFile.ReadEntry( ScriptName, NULL, ScriptSize ) )
\par \tab \tab \tab \{
\par \tab \tab \tab \tab ScriptData = msnew(}{\f2\fs20\cf2\insrsid13587350 char}{\f2\fs20\insrsid13587350 [ScriptSize+1]);
\par \tab \tab \tab \tab ScriptMgr::m_GroupFile.ReadEntry( ScriptName, (byte *)ScriptData, ScriptSize );
\par \tab \tab \tab \tab ScriptData[ScriptSize] = 0;
\par \tab \tab \tab \}
\par \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 else}{\f2\fs20\insrsid13587350  
\par \tab \tab \tab \{\tab \tab \tab \tab \tab 
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350 ( !Casual )
\par \tab \tab \tab \tab \{
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #ifndef}{\f2\fs20\insrsid13587350  SCRIPT_LOCKDOWN
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #ifdef}{\f2\fs20\insrsid13587350  VALVE_DLL
\par \tab \tab \tab \tab \tab \tab \tab CSVGlobals::LogScript( ScriptName, m.pScriptedEnt, m_Dependencies.size(), m.PrecacheOnly, }{\f2\fs20\cf2\insrsid13587350 false}{\f2\fs20\insrsid13587350  );
\par \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #endif
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab \tab \tab ALERT( at_notice, "Script file: \\"%s\\" NOT FOUND!\\n", ScriptName.c_str() ); }{\f2\fs20\cf11\insrsid13587350 //thothie - moved to at_notice in hopes of getting bogus script reports
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #else
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #ifndef}{\f2\fs20\insrsid13587350  RELEASE_LOCKDOWN
\par }{\f2\fs20\cf2\insrsid13587350 #ifdef}{\f2\fs20\insrsid13587350  VALVE_DLL
\par \tab \tab \tab \tab \tab \tab \tab logfile << "ERROR: Script not found: " << ScriptName.c_str() << endl;
\par \tab \tab \tab \tab \tab \tab \tab MessageBox( NULL, msstring("Script not found: ") + ScriptName + "\\r\\n\\r\\nThis is probably caused by a script using #include on a non-existant script.", "FIX THIS QUICK!", MB_OK );
\par }{\f2\fs20\cf2\insrsid13587350 #endif
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #else
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid13587350 //In the release build, this is a fatal error
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid13587350 //SERVER_COMMAND( "exit\\n" ); This crashes the game, currently
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf11\insrsid13587350 //server side so we can retain ability to add server side only scripts
\par }{\f2\fs20\cf2\insrsid13587350 #ifdef}{\f2\fs20\insrsid13587350  VALVE_DLL
\par \tab \tab \tab \tab \tab \tab MessageBox( NULL, msstring("Script not found: ") + ScriptName, "MAP SCRIPT ERROR", MB_OK ); }{\f2\fs20\cf11\insrsid13587350 //Thothie - JUN2007 Trying to get script bugs to report
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf11\insrsid13587350 //exit( 0 ); //MAR2008a Thothie - making non-fatal so it can report multiple
\par }{\f2\fs20\cf2\insrsid13587350 #endif
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #endif
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 #endif
\par }{\f2\fs20\insrsid13587350 \tab \tab \tab \tab \}
\par \tab \tab \tab \tab }{\f2\fs20\cf2\insrsid13587350 return}{\f2\fs20\insrsid13587350  }{\f2\fs20\cf2\insrsid13587350 false}{\f2\fs20\insrsid13587350 ;
\par \tab \tab \tab \}
\par \tab \tab \}
\par 
\par \tab }{\f2\fs20\cf2\insrsid13587350 #ifdef}{\f2\fs20\insrsid13587350  VALVE_DLL
\par \tab \tab CSVGlobals::LogScript( ScriptName, m.pScriptedEnt, m_Dependencies.size(), m.PrecacheOnly, }{\f2\fs20\cf2\insrsid13587350 true}{\f2\fs20\insrsid13587350  );
\par \tab }{\f2\fs20\cf2\insrsid13587350 #endif
\par 
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf2\insrsid13587350 if}{\f2\fs20\insrsid13587350 ( m.pScriptedInterface ) m.pScriptedInterface->Script_Setup( );
\par \tab fReturn = ParseScriptFile( ScriptData );\tab }{\f2\fs20\cf11\insrsid13587350 //Parse events
\par 
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf2\insrsid13587350 delete}{\f2\fs20\insrsid13587350  ScriptData;  }{\f2\fs20\cf11\insrsid13587350 //Deallocate script data
\par 
\par }{\f2\fs20\insrsid13587350 \tab RunScriptEventByName( "game_precache" );\tab }{\f2\fs20\cf11\insrsid13587350 //Run precache event
\par 
\par }{\f2\fs20\insrsid13587350 \tab }{\f2\fs20\cf2\insrsid13587350 return}{\f2\fs20\insrsid13587350  fReturn;
\par \}}{\b\f1\fs20\insrsid13587350 
\par [END]
\par 
\par }{\f1\fs20\insrsid13587350 In *Sigh* BOTH the G/global.h files, add to the definition of MSGlobals in the static bool section (I put mine below the CentralEnabled from oh-so long ago)}{\b\f1\fs20\insrsid13587350 
\par [BEGIN]
\par }{\f2\fs20\insrsid13587350 DevModeEnabled,\tab \tab }{\f2\fs20\cf11\insrsid13587350 //MiB JUL2010_13 - Making it so dev-mode makes it so you can't save.}{\b\f1\fs20\insrsid13587350 
\par [END]
\par 
\par }{\f1\fs20\insrsid13587350 In SVGlobals.cpp (for next few), below "}{\f2\fs20\insrsid13587350 MSGlobals::CentralEnabled = ms_central_enabled.value > 0 ? }{\f2\fs20\cf2\insrsid13587350 true}{\f2\fs20\insrsid13587350   : }{\f2\fs20\cf2\insrsid13587350 false
}{\f2\fs20\insrsid13587350 ;"}{\f1\fs20\insrsid13587350 
\par }{\b\f1\fs20\insrsid13587350 [BEGIN]
\par }{\f2\fs20\insrsid13587350 MSGlobals::DevModeEnabled= ms_dev_mode.value > 0 && !MSGlobals::CentralEnabled ? }{\f2\fs20\cf2\insrsid13587350 true}{\f2\fs20\insrsid13587350  : }{\f2\fs20\cf2\insrsid13587350 false}{\f2\fs20\insrsid13587350 ;}{
\b\f1\fs20\insrsid13587350 
\par [END]
\par 
\par }{\f1\fs20\insrsid13587350 Put below "}{\f2\fs20\insrsid13587350 cvar_t\tab ms_central_online  = \{"ms_central_online","0", 0 \};}{\f1\fs20\insrsid13587350 " this:}{\b\f1\fs20\insrsid13587350 
\par }{\b\f1\fs20\lang1036\langfe1033\langnp1036\insrsid13587350\charrsid3369802 [BEGIN]
\par }{\f2\fs20\lang1036\langfe1033\langnp1036\insrsid13587350\charrsid3369802 cvar_t\tab ms_dev_mode\tab = \{"ms_dev_mode","0",FCVAR_SERVER\}; }{\f2\fs20\cf11\lang1036\langfe1033\langnp1036\insrsid13587350\charrsid3369802 //MiB JUL2010_13 - Dev mode..}{
\b\f1\fs20\lang1036\langfe1033\langnp1036\insrsid13587350\charrsid3369802 
\par }{\b\f1\fs20\insrsid13587350 [END]
\par 
\par }{\f1\fs20\insrsid13587350 Add to this list..}{\b\f1\fs20\insrsid13587350 
\par [BEGIN]
\par }{\f2\fs20\insrsid13587350 CVAR_REGISTER (&ms_dev_mode);}{\b\f1\fs20\insrsid13587350 
\par [END]
\par }{\b\f1\fs20\insrsid12734715 
\par === Supplemental
\par 
\par Global.cpp - below
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid12734715 {\f2\fs20\cf17\insrsid12734715\charrsid12734715 bool MSGlobals::CentralEnabled = false; //Thothie attempting to fix FN upload sploit}{\f2\fs20\cf17\insrsid12734715\charrsid12734715 

\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid12734715 {\b\f1\fs20\insrsid12734715 - add:
\par }{\f2\fs20\cf2\insrsid12734715 bool}{\f2\fs20\insrsid12734715  MSGlobals::DevModeEnabled = }{\f2\fs20\cf2\insrsid12734715 false}{\f2\fs20\insrsid12734715 ; }{\f2\fs20\cf11\insrsid12734715 //Thothie JUL2010_22 attempting to fix "Mapper Scripts.rtf"}{
\f2\fs20\cf11\insrsid12734715 
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid2321245 {\b\f1\fs20\insrsid2321245 SV_Character.cpp - above
\par }{\f2\fs20\cf17\insrsid2321245\charrsid2321245 //Add this map to the list of maps visited}{\f2\fs20\cf17\insrsid2321245 
\par }{\b\f1\fs20\insrsid2321245 - add:
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid2321245 {\f2\fs20\cf11\insrsid2321245 //MiB JUL2010_13 - Don't save in dev mode  
\par }{\f2\fs20\cf2\insrsid2321245 if}{\f2\fs20\insrsid2321245  ( MSGlobals::DevModeEnabled )
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid2321245 {\f2\fs20\insrsid2321245 \tab }{\f2\fs20\cf2\insrsid2321245 return}{\f2\fs20\insrsid2321245 ;}{\b\f1\fs20\cf17\insrsid2321245\charrsid2321245 
\par }}